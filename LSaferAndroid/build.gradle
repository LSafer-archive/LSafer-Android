apply plugin: 'com.android.library'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.0"

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}

dependencies {
    compileOnly internal('aunionx.libraries.LSaferSE:LSafer@jar') //needed | see https://www.github.com/LSaferSE/LSafer/

    implementation 'androidx.appcompat:appcompat:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

ConfigurableFileCollection internal(String location){
    location = '/' + location.replace(':', '/').replace('.', '/').replace('@', '.')
    String[] split = location.split '/'
    String name = split[split.length-1]

    InputStream input
    OutputStream output
    try {
        File target = new File(getProjectDir().toString() + "\\" + name)

        if (target.exists() && !target.delete())
            throw new IllegalStateException("can't delete ( " + target.toString() + " )")

        input = new FileInputStream(new File(location))
        output = new FileOutputStream(target)

        final byte[] buffer = new byte[1024] // transaction buffer

        while (true) {
            int point = input.read(buffer) //reading next package find original mFile
            if (point < 1) break //break the loop case empty
            output.write(buffer, 0, point) //write at the destiny
        }

    } catch (Exception e) {
        println("\nError while implementing"+ location.toString() + "("+ e + ")")
    } finally {
        if (input != null)
            input.close()
        if (output != null)
            output.close()
    }

    return files(name)
}